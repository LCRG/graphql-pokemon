/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Trainer: TrainerObject
      Pokemon: PokemonObject
      TrainerConnection: TrainerConnectionObject
      PageInfo: PageInfoObject
      TrainerEdge: TrainerEdgeObject
      AggregateTrainer: AggregateTrainerObject
      PokemonConnection: PokemonConnectionObject
      PokemonEdge: PokemonEdgeObject
      AggregatePokemon: AggregatePokemonObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TrainerSubscriptionPayload: TrainerSubscriptionPayloadObject
      TrainerPreviousValues: TrainerPreviousValuesObject
      PokemonSubscriptionPayload: PokemonSubscriptionPayloadObject
      PokemonPreviousValues: PokemonPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Trainer: TrainerFieldDetails
      Pokemon: PokemonFieldDetails
      TrainerConnection: TrainerConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TrainerEdge: TrainerEdgeFieldDetails
      AggregateTrainer: AggregateTrainerFieldDetails
      PokemonConnection: PokemonConnectionFieldDetails
      PokemonEdge: PokemonEdgeFieldDetails
      AggregatePokemon: AggregatePokemonFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TrainerSubscriptionPayload: TrainerSubscriptionPayloadFieldDetails
      TrainerPreviousValues: TrainerPreviousValuesFieldDetails
      PokemonSubscriptionPayload: PokemonSubscriptionPayloadFieldDetails
      PokemonPreviousValues: PokemonPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TrainerWhereUniqueInput: TrainerWhereUniqueInputInputObject
      PokemonWhereInput: PokemonWhereInputInputObject
      TrainerWhereInput: TrainerWhereInputInputObject
      PokemonWhereUniqueInput: PokemonWhereUniqueInputInputObject
      TrainerCreateInput: TrainerCreateInputInputObject
      PokemonCreateManyWithoutTrainerInput: PokemonCreateManyWithoutTrainerInputInputObject
      PokemonCreateWithoutTrainerInput: PokemonCreateWithoutTrainerInputInputObject
      TrainerUpdateInput: TrainerUpdateInputInputObject
      PokemonUpdateManyWithoutTrainerInput: PokemonUpdateManyWithoutTrainerInputInputObject
      PokemonUpdateWithWhereUniqueWithoutTrainerInput: PokemonUpdateWithWhereUniqueWithoutTrainerInputInputObject
      PokemonUpdateWithoutTrainerDataInput: PokemonUpdateWithoutTrainerDataInputInputObject
      PokemonUpsertWithWhereUniqueWithoutTrainerInput: PokemonUpsertWithWhereUniqueWithoutTrainerInputInputObject
      PokemonScalarWhereInput: PokemonScalarWhereInputInputObject
      PokemonUpdateManyWithWhereNestedInput: PokemonUpdateManyWithWhereNestedInputInputObject
      PokemonUpdateManyDataInput: PokemonUpdateManyDataInputInputObject
      TrainerUpdateManyMutationInput: TrainerUpdateManyMutationInputInputObject
      PokemonCreateInput: PokemonCreateInputInputObject
      TrainerCreateOneWithoutPokemonInput: TrainerCreateOneWithoutPokemonInputInputObject
      TrainerCreateWithoutPokemonInput: TrainerCreateWithoutPokemonInputInputObject
      PokemonUpdateInput: PokemonUpdateInputInputObject
      TrainerUpdateOneWithoutPokemonInput: TrainerUpdateOneWithoutPokemonInputInputObject
      TrainerUpdateWithoutPokemonDataInput: TrainerUpdateWithoutPokemonDataInputInputObject
      TrainerUpsertWithoutPokemonInput: TrainerUpsertWithoutPokemonInputInputObject
      PokemonUpdateManyMutationInput: PokemonUpdateManyMutationInputInputObject
      TrainerSubscriptionWhereInput: TrainerSubscriptionWhereInputInputObject
      PokemonSubscriptionWhereInput: PokemonSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    PokemonOrderByInput: PokemonOrderByInputValues,
    TrainerOrderByInput: TrainerOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'trainer', args?: QueryTrainerArgs[] | false, alias?: string  } 
  | { name: 'trainers', args?: QueryTrainersArgs[] | false, alias?: string  } 
  | { name: 'trainersConnection', args?: QueryTrainersConnectionArgs[] | false, alias?: string  } 
  | { name: 'pokemon', args?: QueryPokemonArgs[] | false, alias?: string  } 
  | { name: 'pokemons', args?: QueryPokemonsArgs[] | false, alias?: string  } 
  | { name: 'pokemonsConnection', args?: QueryPokemonsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'trainer'
  | 'trainers'
  | 'trainersConnection'
  | 'pokemon'
  | 'pokemons'
  | 'pokemonsConnection'


type QueryTrainerArgs =
  | 'where'
type QueryTrainersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTrainersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPokemonArgs =
  | 'where'
type QueryPokemonsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPokemonsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  trainer: {
    type: 'Trainer'
    args: Record<QueryTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TrainerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer | null> | prisma.Trainer | null
  }
  trainers: {
    type: 'Trainer'
    args: Record<QueryTrainersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrainerWhereInput | null, orderBy?: prisma.TrainerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer[]> | prisma.Trainer[]
  }
  trainersConnection: {
    type: 'TrainerConnection'
    args: Record<QueryTrainersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TrainerWhereInput | null, orderBy?: prisma.TrainerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrainerConnection> | prisma.TrainerConnection
  }
  pokemon: {
    type: 'Pokemon'
    args: Record<QueryPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  pokemons: {
    type: 'Pokemon'
    args: Record<QueryPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonWhereInput | null, orderBy?: prisma.PokemonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon[]> | prisma.Pokemon[]
  }
  pokemonsConnection: {
    type: 'PokemonConnection'
    args: Record<QueryPokemonsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PokemonWhereInput | null, orderBy?: prisma.PokemonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonConnection> | prisma.PokemonConnection
  }
}
  

// Types for Trainer

type TrainerObject =
  | TrainerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'pokemon', args?: TrainerPokemonArgs[] | false, alias?: string  } 

type TrainerFields =
  | 'id'
  | 'name'
  | 'pokemon'


type TrainerPokemonArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TrainerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  pokemon: {
    type: 'Pokemon'
    args: Record<TrainerPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Trainer">,
      args: { where?: PokemonWhereInput | null, orderBy?: prisma.PokemonOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon[]> | prisma.Pokemon[]
  }
}
  

// Types for Pokemon

type PokemonObject =
  | PokemonFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 
  | { name: 'trainer', args?: [] | false, alias?: string  } 

type PokemonFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'url'
  | 'trainer'



  

export interface PokemonFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  trainer: {
    type: 'Trainer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Pokemon">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer | null> | prisma.Trainer | null
  }
}
  

// Types for TrainerConnection

type TrainerConnectionObject =
  | TrainerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TrainerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TrainerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrainerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TrainerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TrainerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrainerEdge[]> | prisma.TrainerEdge[]
  }
  aggregate: {
    type: 'AggregateTrainer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrainerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTrainer> | prisma.AggregateTrainer
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TrainerEdge

type TrainerEdgeObject =
  | TrainerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TrainerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TrainerEdgeFieldDetails {
  node: {
    type: 'Trainer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrainerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer> | prisma.Trainer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTrainer

type AggregateTrainerObject =
  | AggregateTrainerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTrainerFields =
  | 'count'



  

export interface AggregateTrainerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PokemonConnection

type PokemonConnectionObject =
  | PokemonConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PokemonConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PokemonConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PokemonEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonEdge[]> | prisma.PokemonEdge[]
  }
  aggregate: {
    type: 'AggregatePokemon'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePokemon> | prisma.AggregatePokemon
  }
}
  

// Types for PokemonEdge

type PokemonEdgeObject =
  | PokemonEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PokemonEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PokemonEdgeFieldDetails {
  node: {
    type: 'Pokemon'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePokemon

type AggregatePokemonObject =
  | AggregatePokemonFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePokemonFields =
  | 'count'



  

export interface AggregatePokemonFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTrainer', args?: MutationCreateTrainerArgs[] | false, alias?: string  } 
  | { name: 'updateTrainer', args?: MutationUpdateTrainerArgs[] | false, alias?: string  } 
  | { name: 'updateManyTrainers', args?: MutationUpdateManyTrainersArgs[] | false, alias?: string  } 
  | { name: 'upsertTrainer', args?: MutationUpsertTrainerArgs[] | false, alias?: string  } 
  | { name: 'deleteTrainer', args?: MutationDeleteTrainerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTrainers', args?: MutationDeleteManyTrainersArgs[] | false, alias?: string  } 
  | { name: 'createPokemon', args?: MutationCreatePokemonArgs[] | false, alias?: string  } 
  | { name: 'updatePokemon', args?: MutationUpdatePokemonArgs[] | false, alias?: string  } 
  | { name: 'updateManyPokemons', args?: MutationUpdateManyPokemonsArgs[] | false, alias?: string  } 
  | { name: 'upsertPokemon', args?: MutationUpsertPokemonArgs[] | false, alias?: string  } 
  | { name: 'deletePokemon', args?: MutationDeletePokemonArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPokemons', args?: MutationDeleteManyPokemonsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTrainer'
  | 'updateTrainer'
  | 'updateManyTrainers'
  | 'upsertTrainer'
  | 'deleteTrainer'
  | 'deleteManyTrainers'
  | 'createPokemon'
  | 'updatePokemon'
  | 'updateManyPokemons'
  | 'upsertPokemon'
  | 'deletePokemon'
  | 'deleteManyPokemons'


type MutationCreateTrainerArgs =
  | 'data'
type MutationUpdateTrainerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTrainersArgs =
  | 'data'
  | 'where'
type MutationUpsertTrainerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTrainerArgs =
  | 'where'
type MutationDeleteManyTrainersArgs =
  | 'where'
type MutationCreatePokemonArgs =
  | 'data'
type MutationUpdatePokemonArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPokemonsArgs =
  | 'data'
  | 'where'
type MutationUpsertPokemonArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePokemonArgs =
  | 'where'
type MutationDeleteManyPokemonsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTrainer: {
    type: 'Trainer'
    args: Record<MutationCreateTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrainerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer> | prisma.Trainer
  }
  updateTrainer: {
    type: 'Trainer'
    args: Record<MutationUpdateTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrainerUpdateInput, where: TrainerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer | null> | prisma.Trainer | null
  }
  updateManyTrainers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTrainersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TrainerUpdateManyMutationInput, where?: TrainerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTrainer: {
    type: 'Trainer'
    args: Record<MutationUpsertTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrainerWhereUniqueInput, create: TrainerCreateInput, update: TrainerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer> | prisma.Trainer
  }
  deleteTrainer: {
    type: 'Trainer'
    args: Record<MutationDeleteTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TrainerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer | null> | prisma.Trainer | null
  }
  deleteManyTrainers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTrainersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TrainerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPokemon: {
    type: 'Pokemon'
    args: Record<MutationCreatePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  updatePokemon: {
    type: 'Pokemon'
    args: Record<MutationUpdatePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonUpdateInput, where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  updateManyPokemons: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PokemonUpdateManyMutationInput, where?: PokemonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPokemon: {
    type: 'Pokemon'
    args: Record<MutationUpsertPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonWhereUniqueInput, create: PokemonCreateInput, update: PokemonUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon> | prisma.Pokemon
  }
  deletePokemon: {
    type: 'Pokemon'
    args: Record<MutationDeletePokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PokemonWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  deleteManyPokemons: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPokemonsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PokemonWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'trainer', args?: SubscriptionTrainerArgs[] | false, alias?: string  } 
  | { name: 'pokemon', args?: SubscriptionPokemonArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'trainer'
  | 'pokemon'


type SubscriptionTrainerArgs =
  | 'where'
type SubscriptionPokemonArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  trainer: {
    type: 'TrainerSubscriptionPayload'
    args: Record<SubscriptionTrainerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TrainerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrainerSubscriptionPayload | null> | prisma.TrainerSubscriptionPayload | null
  }
  pokemon: {
    type: 'PokemonSubscriptionPayload'
    args: Record<SubscriptionPokemonArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PokemonSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonSubscriptionPayload | null> | prisma.PokemonSubscriptionPayload | null
  }
}
  

// Types for TrainerSubscriptionPayload

type TrainerSubscriptionPayloadObject =
  | TrainerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TrainerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TrainerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TrainerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Trainer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrainerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Trainer | null> | prisma.Trainer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TrainerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TrainerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TrainerPreviousValues | null> | prisma.TrainerPreviousValues | null
  }
}
  

// Types for TrainerPreviousValues

type TrainerPreviousValuesObject =
  | TrainerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type TrainerPreviousValuesFields =
  | 'id'
  | 'name'



  

export interface TrainerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PokemonSubscriptionPayload

type PokemonSubscriptionPayloadObject =
  | PokemonSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PokemonSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PokemonSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Pokemon'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Pokemon | null> | prisma.Pokemon | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PokemonPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PokemonSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PokemonPreviousValues | null> | prisma.PokemonPreviousValues | null
  }
}
  

// Types for PokemonPreviousValues

type PokemonPreviousValuesObject =
  | PokemonPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'url', args?: [] | false, alias?: string  } 

type PokemonPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'name'
  | 'url'



  

export interface PokemonPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  url: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface TrainerWhereUniqueInput {
  id?: string | null
}
export type TrainerWhereUniqueInputInputObject =
  | Extract<keyof TrainerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PokemonWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  trainer?: TrainerWhereInput | null
  AND?: PokemonWhereInput[]
  OR?: PokemonWhereInput[]
  NOT?: PokemonWhereInput[]
}
export type PokemonWhereInputInputObject =
  | Extract<keyof PokemonWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'trainer', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TrainerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  pokemon_every?: PokemonWhereInput | null
  pokemon_some?: PokemonWhereInput | null
  pokemon_none?: PokemonWhereInput | null
  AND?: TrainerWhereInput[]
  OR?: TrainerWhereInput[]
  NOT?: TrainerWhereInput[]
}
export type TrainerWhereInputInputObject =
  | Extract<keyof TrainerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'pokemon_every', alias?: string  } 
  | { name: 'pokemon_some', alias?: string  } 
  | { name: 'pokemon_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonWhereUniqueInput {
  id?: string | null
}
export type PokemonWhereUniqueInputInputObject =
  | Extract<keyof PokemonWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TrainerCreateInput {
  name?: string
  pokemon?: PokemonCreateManyWithoutTrainerInput | null
}
export type TrainerCreateInputInputObject =
  | Extract<keyof TrainerCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'pokemon', alias?: string  } 
  
export interface PokemonCreateManyWithoutTrainerInput {
  create?: PokemonCreateWithoutTrainerInput[]
  connect?: PokemonWhereUniqueInput[]
}
export type PokemonCreateManyWithoutTrainerInputInputObject =
  | Extract<keyof PokemonCreateManyWithoutTrainerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PokemonCreateWithoutTrainerInput {
  name?: string | null
  url?: string | null
}
export type PokemonCreateWithoutTrainerInputInputObject =
  | Extract<keyof PokemonCreateWithoutTrainerInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TrainerUpdateInput {
  name?: string | null
  pokemon?: PokemonUpdateManyWithoutTrainerInput | null
}
export type TrainerUpdateInputInputObject =
  | Extract<keyof TrainerUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'pokemon', alias?: string  } 
  
export interface PokemonUpdateManyWithoutTrainerInput {
  create?: PokemonCreateWithoutTrainerInput[]
  delete?: PokemonWhereUniqueInput[]
  connect?: PokemonWhereUniqueInput[]
  set?: PokemonWhereUniqueInput[]
  disconnect?: PokemonWhereUniqueInput[]
  update?: PokemonUpdateWithWhereUniqueWithoutTrainerInput[]
  upsert?: PokemonUpsertWithWhereUniqueWithoutTrainerInput[]
  deleteMany?: PokemonScalarWhereInput[]
  updateMany?: PokemonUpdateManyWithWhereNestedInput[]
}
export type PokemonUpdateManyWithoutTrainerInputInputObject =
  | Extract<keyof PokemonUpdateManyWithoutTrainerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PokemonUpdateWithWhereUniqueWithoutTrainerInput {
  where?: PokemonWhereUniqueInput
  data?: PokemonUpdateWithoutTrainerDataInput
}
export type PokemonUpdateWithWhereUniqueWithoutTrainerInputInputObject =
  | Extract<keyof PokemonUpdateWithWhereUniqueWithoutTrainerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PokemonUpdateWithoutTrainerDataInput {
  name?: string | null
  url?: string | null
}
export type PokemonUpdateWithoutTrainerDataInputInputObject =
  | Extract<keyof PokemonUpdateWithoutTrainerDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface PokemonUpsertWithWhereUniqueWithoutTrainerInput {
  where?: PokemonWhereUniqueInput
  update?: PokemonUpdateWithoutTrainerDataInput
  create?: PokemonCreateWithoutTrainerInput
}
export type PokemonUpsertWithWhereUniqueWithoutTrainerInputInputObject =
  | Extract<keyof PokemonUpsertWithWhereUniqueWithoutTrainerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PokemonScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  url?: string | null
  url_not?: string | null
  url_in?: string[]
  url_not_in?: string[]
  url_lt?: string | null
  url_lte?: string | null
  url_gt?: string | null
  url_gte?: string | null
  url_contains?: string | null
  url_not_contains?: string | null
  url_starts_with?: string | null
  url_not_starts_with?: string | null
  url_ends_with?: string | null
  url_not_ends_with?: string | null
  AND?: PokemonScalarWhereInput[]
  OR?: PokemonScalarWhereInput[]
  NOT?: PokemonScalarWhereInput[]
}
export type PokemonScalarWhereInputInputObject =
  | Extract<keyof PokemonScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'url_not', alias?: string  } 
  | { name: 'url_in', alias?: string  } 
  | { name: 'url_not_in', alias?: string  } 
  | { name: 'url_lt', alias?: string  } 
  | { name: 'url_lte', alias?: string  } 
  | { name: 'url_gt', alias?: string  } 
  | { name: 'url_gte', alias?: string  } 
  | { name: 'url_contains', alias?: string  } 
  | { name: 'url_not_contains', alias?: string  } 
  | { name: 'url_starts_with', alias?: string  } 
  | { name: 'url_not_starts_with', alias?: string  } 
  | { name: 'url_ends_with', alias?: string  } 
  | { name: 'url_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonUpdateManyWithWhereNestedInput {
  where?: PokemonScalarWhereInput
  data?: PokemonUpdateManyDataInput
}
export type PokemonUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PokemonUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PokemonUpdateManyDataInput {
  name?: string | null
  url?: string | null
}
export type PokemonUpdateManyDataInputInputObject =
  | Extract<keyof PokemonUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TrainerUpdateManyMutationInput {
  name?: string | null
}
export type TrainerUpdateManyMutationInputInputObject =
  | Extract<keyof TrainerUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PokemonCreateInput {
  name?: string | null
  url?: string | null
  trainer?: TrainerCreateOneWithoutPokemonInput | null
}
export type PokemonCreateInputInputObject =
  | Extract<keyof PokemonCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'trainer', alias?: string  } 
  
export interface TrainerCreateOneWithoutPokemonInput {
  create?: TrainerCreateWithoutPokemonInput | null
  connect?: TrainerWhereUniqueInput | null
}
export type TrainerCreateOneWithoutPokemonInputInputObject =
  | Extract<keyof TrainerCreateOneWithoutPokemonInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TrainerCreateWithoutPokemonInput {
  name?: string
}
export type TrainerCreateWithoutPokemonInputInputObject =
  | Extract<keyof TrainerCreateWithoutPokemonInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PokemonUpdateInput {
  name?: string | null
  url?: string | null
  trainer?: TrainerUpdateOneWithoutPokemonInput | null
}
export type PokemonUpdateInputInputObject =
  | Extract<keyof PokemonUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  | { name: 'trainer', alias?: string  } 
  
export interface TrainerUpdateOneWithoutPokemonInput {
  create?: TrainerCreateWithoutPokemonInput | null
  update?: TrainerUpdateWithoutPokemonDataInput | null
  upsert?: TrainerUpsertWithoutPokemonInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TrainerWhereUniqueInput | null
}
export type TrainerUpdateOneWithoutPokemonInputInputObject =
  | Extract<keyof TrainerUpdateOneWithoutPokemonInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TrainerUpdateWithoutPokemonDataInput {
  name?: string | null
}
export type TrainerUpdateWithoutPokemonDataInputInputObject =
  | Extract<keyof TrainerUpdateWithoutPokemonDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface TrainerUpsertWithoutPokemonInput {
  update?: TrainerUpdateWithoutPokemonDataInput
  create?: TrainerCreateWithoutPokemonInput
}
export type TrainerUpsertWithoutPokemonInputInputObject =
  | Extract<keyof TrainerUpsertWithoutPokemonInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PokemonUpdateManyMutationInput {
  name?: string | null
  url?: string | null
}
export type PokemonUpdateManyMutationInputInputObject =
  | Extract<keyof PokemonUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'url', alias?: string  } 
  
export interface TrainerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TrainerWhereInput | null
  AND?: TrainerSubscriptionWhereInput[]
  OR?: TrainerSubscriptionWhereInput[]
  NOT?: TrainerSubscriptionWhereInput[]
}
export type TrainerSubscriptionWhereInputInputObject =
  | Extract<keyof TrainerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PokemonSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PokemonWhereInput | null
  AND?: PokemonSubscriptionWhereInput[]
  OR?: PokemonSubscriptionWhereInput[]
  NOT?: PokemonSubscriptionWhereInput[]
}
export type PokemonSubscriptionWhereInputInputObject =
  | Extract<keyof PokemonSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type PokemonOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'url_ASC'
  | 'url_DESC'
  
export type TrainerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  