// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  pokemon: (where?: PokemonWhereInput) => Promise<boolean>;
  trainer: (where?: TrainerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  pokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  pokemons: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Pokemon>;
  pokemonsConnection: (
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PokemonConnectionPromise;
  trainer: (where: TrainerWhereUniqueInput) => TrainerPromise;
  trainers: (
    args?: {
      where?: TrainerWhereInput;
      orderBy?: TrainerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Trainer>;
  trainersConnection: (
    args?: {
      where?: TrainerWhereInput;
      orderBy?: TrainerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TrainerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPokemon: (data: PokemonCreateInput) => PokemonPromise;
  updatePokemon: (
    args: { data: PokemonUpdateInput; where: PokemonWhereUniqueInput }
  ) => PokemonPromise;
  updateManyPokemons: (
    args: { data: PokemonUpdateManyMutationInput; where?: PokemonWhereInput }
  ) => BatchPayloadPromise;
  upsertPokemon: (
    args: {
      where: PokemonWhereUniqueInput;
      create: PokemonCreateInput;
      update: PokemonUpdateInput;
    }
  ) => PokemonPromise;
  deletePokemon: (where: PokemonWhereUniqueInput) => PokemonPromise;
  deleteManyPokemons: (where?: PokemonWhereInput) => BatchPayloadPromise;
  createTrainer: (data: TrainerCreateInput) => TrainerPromise;
  updateTrainer: (
    args: { data: TrainerUpdateInput; where: TrainerWhereUniqueInput }
  ) => TrainerPromise;
  updateManyTrainers: (
    args: { data: TrainerUpdateManyMutationInput; where?: TrainerWhereInput }
  ) => BatchPayloadPromise;
  upsertTrainer: (
    args: {
      where: TrainerWhereUniqueInput;
      create: TrainerCreateInput;
      update: TrainerUpdateInput;
    }
  ) => TrainerPromise;
  deleteTrainer: (where: TrainerWhereUniqueInput) => TrainerPromise;
  deleteManyTrainers: (where?: TrainerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  pokemon: (
    where?: PokemonSubscriptionWhereInput
  ) => PokemonSubscriptionPayloadSubscription;
  trainer: (
    where?: TrainerSubscriptionWhereInput
  ) => TrainerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PokemonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC";

export type TrainerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TrainerUpdateOneWithoutPokemonInput {
  create?: TrainerCreateWithoutPokemonInput;
  update?: TrainerUpdateWithoutPokemonDataInput;
  upsert?: TrainerUpsertWithoutPokemonInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TrainerWhereUniqueInput;
}

export type PokemonWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PokemonUpdateManyWithoutTrainerInput {
  create?:
    | PokemonCreateWithoutTrainerInput[]
    | PokemonCreateWithoutTrainerInput;
  delete?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  set?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  disconnect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
  update?:
    | PokemonUpdateWithWhereUniqueWithoutTrainerInput[]
    | PokemonUpdateWithWhereUniqueWithoutTrainerInput;
  upsert?:
    | PokemonUpsertWithWhereUniqueWithoutTrainerInput[]
    | PokemonUpsertWithWhereUniqueWithoutTrainerInput;
  deleteMany?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  updateMany?:
    | PokemonUpdateManyWithWhereNestedInput[]
    | PokemonUpdateManyWithWhereNestedInput;
}

export interface TrainerCreateInput {
  name: String;
  pokemon?: PokemonCreateManyWithoutTrainerInput;
}

export interface TrainerUpdateInput {
  name?: String;
  pokemon?: PokemonUpdateManyWithoutTrainerInput;
}

export interface TrainerUpsertWithoutPokemonInput {
  update: TrainerUpdateWithoutPokemonDataInput;
  create: TrainerCreateWithoutPokemonInput;
}

export interface TrainerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TrainerWhereInput;
  AND?: TrainerSubscriptionWhereInput[] | TrainerSubscriptionWhereInput;
  OR?: TrainerSubscriptionWhereInput[] | TrainerSubscriptionWhereInput;
  NOT?: TrainerSubscriptionWhereInput[] | TrainerSubscriptionWhereInput;
}

export interface TrainerUpdateManyMutationInput {
  name?: String;
}

export interface PokemonCreateInput {
  name?: String;
  url?: String;
  trainer?: TrainerCreateOneWithoutPokemonInput;
}

export interface PokemonUpdateManyWithWhereNestedInput {
  where: PokemonScalarWhereInput;
  data: PokemonUpdateManyDataInput;
}

export interface TrainerCreateOneWithoutPokemonInput {
  create?: TrainerCreateWithoutPokemonInput;
  connect?: TrainerWhereUniqueInput;
}

export interface PokemonUpsertWithWhereUniqueWithoutTrainerInput {
  where: PokemonWhereUniqueInput;
  update: PokemonUpdateWithoutTrainerDataInput;
  create: PokemonCreateWithoutTrainerInput;
}

export interface TrainerCreateWithoutPokemonInput {
  name: String;
}

export interface PokemonUpdateWithoutTrainerDataInput {
  name?: String;
  url?: String;
}

export interface PokemonUpdateInput {
  name?: String;
  url?: String;
  trainer?: TrainerUpdateOneWithoutPokemonInput;
}

export interface TrainerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  pokemon_every?: PokemonWhereInput;
  pokemon_some?: PokemonWhereInput;
  pokemon_none?: PokemonWhereInput;
  AND?: TrainerWhereInput[] | TrainerWhereInput;
  OR?: TrainerWhereInput[] | TrainerWhereInput;
  NOT?: TrainerWhereInput[] | TrainerWhereInput;
}

export interface PokemonCreateWithoutTrainerInput {
  name?: String;
  url?: String;
}

export interface PokemonUpdateManyDataInput {
  name?: String;
  url?: String;
}

export interface PokemonCreateManyWithoutTrainerInput {
  create?:
    | PokemonCreateWithoutTrainerInput[]
    | PokemonCreateWithoutTrainerInput;
  connect?: PokemonWhereUniqueInput[] | PokemonWhereUniqueInput;
}

export interface PokemonUpdateManyMutationInput {
  name?: String;
  url?: String;
}

export interface PokemonWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  trainer?: TrainerWhereInput;
  AND?: PokemonWhereInput[] | PokemonWhereInput;
  OR?: PokemonWhereInput[] | PokemonWhereInput;
  NOT?: PokemonWhereInput[] | PokemonWhereInput;
}

export interface TrainerUpdateWithoutPokemonDataInput {
  name?: String;
}

export interface PokemonScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  OR?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
  NOT?: PokemonScalarWhereInput[] | PokemonScalarWhereInput;
}

export interface PokemonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PokemonWhereInput;
  AND?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  OR?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
  NOT?: PokemonSubscriptionWhereInput[] | PokemonSubscriptionWhereInput;
}

export interface PokemonUpdateWithWhereUniqueWithoutTrainerInput {
  where: PokemonWhereUniqueInput;
  data: PokemonUpdateWithoutTrainerDataInput;
}

export type TrainerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface TrainerPreviousValues {
  id: ID_Output;
  name: String;
}

export interface TrainerPreviousValuesPromise
  extends Promise<TrainerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface TrainerPreviousValuesSubscription
  extends Promise<AsyncIterator<TrainerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePokemon {
  count: Int;
}

export interface AggregatePokemonPromise
  extends Promise<AggregatePokemon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePokemonSubscription
  extends Promise<AsyncIterator<AggregatePokemon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Pokemon {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  url?: String;
}

export interface PokemonPromise extends Promise<Pokemon>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  trainer: <T = TrainerPromise>() => T;
}

export interface PokemonSubscription
  extends Promise<AsyncIterator<Pokemon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  trainer: <T = TrainerSubscription>() => T;
}

export interface PokemonEdge {
  node: Pokemon;
  cursor: String;
}

export interface PokemonEdgePromise extends Promise<PokemonEdge>, Fragmentable {
  node: <T = PokemonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PokemonEdgeSubscription
  extends Promise<AsyncIterator<PokemonEdge>>,
    Fragmentable {
  node: <T = PokemonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Trainer {
  id: ID_Output;
  name: String;
}

export interface TrainerPromise extends Promise<Trainer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  pokemon: <T = FragmentableArray<Pokemon>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TrainerSubscription
  extends Promise<AsyncIterator<Trainer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  pokemon: <T = Promise<AsyncIterator<PokemonSubscription>>>(
    args?: {
      where?: PokemonWhereInput;
      orderBy?: PokemonOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateTrainer {
  count: Int;
}

export interface AggregateTrainerPromise
  extends Promise<AggregateTrainer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTrainerSubscription
  extends Promise<AsyncIterator<AggregateTrainer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PokemonSubscriptionPayload {
  mutation: MutationType;
  node: Pokemon;
  updatedFields: String[];
  previousValues: PokemonPreviousValues;
}

export interface PokemonSubscriptionPayloadPromise
  extends Promise<PokemonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PokemonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PokemonPreviousValuesPromise>() => T;
}

export interface PokemonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PokemonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PokemonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PokemonPreviousValuesSubscription>() => T;
}

export interface PokemonConnection {
  pageInfo: PageInfo;
  edges: PokemonEdge[];
}

export interface PokemonConnectionPromise
  extends Promise<PokemonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PokemonEdge>>() => T;
  aggregate: <T = AggregatePokemonPromise>() => T;
}

export interface PokemonConnectionSubscription
  extends Promise<AsyncIterator<PokemonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PokemonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePokemonSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TrainerEdge {
  node: Trainer;
  cursor: String;
}

export interface TrainerEdgePromise extends Promise<TrainerEdge>, Fragmentable {
  node: <T = TrainerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TrainerEdgeSubscription
  extends Promise<AsyncIterator<TrainerEdge>>,
    Fragmentable {
  node: <T = TrainerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TrainerSubscriptionPayload {
  mutation: MutationType;
  node: Trainer;
  updatedFields: String[];
  previousValues: TrainerPreviousValues;
}

export interface TrainerSubscriptionPayloadPromise
  extends Promise<TrainerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TrainerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TrainerPreviousValuesPromise>() => T;
}

export interface TrainerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TrainerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TrainerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TrainerPreviousValuesSubscription>() => T;
}

export interface PokemonPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
  url?: String;
}

export interface PokemonPreviousValuesPromise
  extends Promise<PokemonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  url: () => Promise<String>;
}

export interface PokemonPreviousValuesSubscription
  extends Promise<AsyncIterator<PokemonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface TrainerConnection {
  pageInfo: PageInfo;
  edges: TrainerEdge[];
}

export interface TrainerConnectionPromise
  extends Promise<TrainerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TrainerEdge>>() => T;
  aggregate: <T = AggregateTrainerPromise>() => T;
}

export interface TrainerConnectionSubscription
  extends Promise<AsyncIterator<TrainerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TrainerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTrainerSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Trainer",
    embedded: false
  },
  {
    name: "Pokemon",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
